/**
* iRODS REST API
* This is the iRODS REST API
*
* OpenAPI spec version: 1.0.0
* Contact: info@irods.org
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * StreamPutApi.h
 *
 * 
 */

#ifndef StreamPutApi_H_
#define StreamPutApi_H_

#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include "ModelBase.h"

#include <string>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

class  StreamPutApi {
public:
    StreamPutApi(Pistache::Address addr);
    virtual ~StreamPutApi() {};
    void init(size_t thr);
    void start();
    void shutdown();

    const std::string base = "/irods-rest/1.0.0";

private:
    void setupRoutes();

    void stream_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void stream_put_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Http::Endpoint> httpEndpoint;
    Pistache::Rest::Router router;

    /// <summary>
    /// streams bytes to/from a data thinger
    /// </summary>
    /// <remarks>
    /// Sends an HTTP stream of file bytes 
    /// </remarks>
    /// <param name="path">irods absolute logical path to the file</param>
    /// <param name="offset">number of bytes to skip (optional)</param>
    /// <param name="count">maximum number of bytes to write (optional)</param>
    /// <param name="truncate">truncate the data object on open (optional)</param>
    virtual void stream(const Pistache::Http::Header::Collection &headers,
                        const std::string &body,
                        const std::string &path,
                        const Pistache::Optional<std::string> &offset,
                        const Pistache::Optional<std::string> &count,
                        const Pistache::Optional<std::string> &truncate,
                        Pistache::Http::ResponseWriter &response) = 0;
};

}
}
}
}

#endif /* StreamPutApi_H_ */

