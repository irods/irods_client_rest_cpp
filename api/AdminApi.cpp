/**
* iRODS REST API
* This is the iRODS REST API
*
* OpenAPI spec version: 1.0.0
* Contact: info@irods.org
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "AdminApi.h"

#include "spdlog/spdlog.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

AdminApi::AdminApi(Pistache::Address addr)
    : httpEndpoint(std::make_shared<Pistache::Http::Endpoint>(addr))
{ };

void AdminApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr);
    httpEndpoint->init(opts);
    setupRoutes();
}

void AdminApi::start() {
    httpEndpoint->setHandler(router.handler());
    httpEndpoint->serve();
}

void AdminApi::shutdown() {
    httpEndpoint->shutdown();
}

void AdminApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(router, base + "/admin", Routes::bind(&AdminApi::catalog_admin_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&AdminApi::admin_api_default_handler, this));
}

void AdminApi::catalog_admin_handler(const Pistache::Rest::Request& request,
                                     Pistache::Http::ResponseWriter response)
{
    try {
        spdlog::info("Incoming request from [{}].", request.address().host());

        // Getting the admin params
        auto action = request.query().get("action");
        auto target = request.query().get("target");
        auto arg2   = request.query().get("arg2");
        auto arg3   = request.query().get("arg3");
        auto arg4   = request.query().get("arg4");
        auto arg5   = request.query().get("arg5");
        auto arg6   = request.query().get("arg6");
        auto arg7   = request.query().get("arg7");

        this->catalog_admin(request.headers(), request.body(), action, target, arg2, arg3, arg4, arg5, arg6, arg7, response);
    }
    catch (const std::runtime_error& e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    }
}

void AdminApi::admin_api_default_handler(const Pistache::Rest::Request& request,
                                         Pistache::Http::ResponseWriter response)
{
    response.send(Pistache::Http::Code::Not_Found, "The requested Admin method does not exist");
}

}
}
}
}

