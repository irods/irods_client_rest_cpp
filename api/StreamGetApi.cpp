/**
* iRODS REST API
* This is the iRODS REST API
*
* OpenAPI spec version: 1.0.0
* Contact: info@irods.org
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "StreamGetApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

StreamGetApi::StreamGetApi(Pistache::Address addr)
    : httpEndpoint(std::make_shared<Pistache::Http::Endpoint>(addr))
{ };

void StreamGetApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr);
    httpEndpoint->init(opts);
    setupRoutes();
}

void StreamGetApi::start() {
    httpEndpoint->setHandler(router.handler());
    httpEndpoint->serve();
}

void StreamGetApi::shutdown() {
    httpEndpoint->shutdown();
}

void StreamGetApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(router, base + "/stream", Routes::bind(&StreamGetApi::stream_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&StreamGetApi::stream_get_api_default_handler, this));
}

void StreamGetApi::stream_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto path = request.query().get("path");
    auto offset = request.query().get("offset");
    auto count = request.query().get("count");

    try {
      this->stream(request.headers(), request.body(), path.get(), count.get(), offset, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void StreamGetApi::stream_get_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested StreamGet method does not exist");
}

}
}
}
}

